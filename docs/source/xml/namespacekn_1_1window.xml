<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacekn_1_1window" kind="namespace" language="C++">
    <compoundname>kn::window</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacekn_1_1window_1a8455fe7aeb3dd34c9a9b60cc3fe047ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::init</definition>
        <argsstring>(math::Vec2 size, int scale=1)</argsstring>
        <name>init</name>
        <qualifiedname>kn::window::init</qualifiedname>
        <param>
          <type><ref refid="classkn_1_1math_1_1_vec2" kindref="compound">math::Vec2</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Initialize the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the window. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scale of the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="26" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1ac6416284db584e950d60896bbaf8b889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::cls</definition>
        <argsstring>(Color color={0, 0, 0, 255})</argsstring>
        <name>cls</name>
        <qualifiedname>kn::window::cls</qualifiedname>
        <param>
          <type><ref refid="namespacekn_1a91eb5db82680dedc10733f04def8dd2f" kindref="member">Color</ref></type>
          <declname>color</declname>
          <defval>{0, 0, 0, 255}</defval>
        </param>
        <briefdescription>
<para>Clear the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color to clear the screen. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="33" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1a30cb9845ea877d981d4855efa78eef5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::flip</definition>
        <argsstring>()</argsstring>
        <name>flip</name>
        <qualifiedname>kn::window::flip</qualifiedname>
        <briefdescription>
<para>Flip the render frame buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="38" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1aa0bbd7d81e5da8cc1521b72b697f34c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::blit</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, Rect crop, Rect rect)</argsstring>
        <name>blit</name>
        <qualifiedname>kn::window::blit</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>crop</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Draw a texture using rects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crop</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="47" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1a2618d7099a79a14e8a6fbbc05b1f95de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::blit</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, const math::Vec2 &amp;position)</argsstring>
        <name>blit</name>
        <qualifiedname>kn::window::blit</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="classkn_1_1math_1_1_vec2" kindref="compound">math::Vec2</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Draw a texture to a position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to draw at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="55" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1a81b716dc9f47c0c0ba269a369d397371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::blitEx</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, Rect crop, Rect rect, double angle=0.0, bool flipX=false, bool flipY=false)</argsstring>
        <name>blitEx</name>
        <qualifiedname>kn::window::blitEx</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>crop</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipX</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipY</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Draw a texture using rects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crop</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to draw the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipX</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the x-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipY</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the y-axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="67" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1aa0cebd65eb41527689c2d92037e12781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::blitEx</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, const math::Vec2 &amp;position, double angle=0.0, bool flipX=false, bool flipY=false)</argsstring>
        <name>blitEx</name>
        <qualifiedname>kn::window::blitEx</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="classkn_1_1math_1_1_vec2" kindref="compound">math::Vec2</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipX</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipY</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Draw a texture to a position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to draw at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to draw the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipX</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the x-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipY</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the y-axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="79" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1a3ce2cfb79f449f807efa417699d94081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer * kn::window::getRenderer</definition>
        <argsstring>()</argsstring>
        <name>getRenderer</name>
        <qualifiedname>kn::window::getRenderer</qualifiedname>
        <briefdescription>
<para>Get the window renderer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The window renderer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="87" column="14" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="87" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1aca5f015b5824a5056f796b57278f8812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="namespacekn_1af947a748461c782cd90f4d4b7cdbea21" kindref="member">kn::Event</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; kn::Event &gt; &amp; kn::window::getEvents</definition>
        <argsstring>()</argsstring>
        <name>getEvents</name>
        <qualifiedname>kn::window::getEvents</qualifiedname>
        <briefdescription>
<para>Get user events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The user events. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="94" column="19" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="94" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1afac8f8f12520ae16bb24df69bbaf0a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::window::getFullscreen</definition>
        <argsstring>()</argsstring>
        <name>getFullscreen</name>
        <qualifiedname>kn::window::getFullscreen</qualifiedname>
        <briefdescription>
<para>Get whether the window is fullscreen or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the window is fullscreen or not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="101" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="101" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1afb2689c6f36fb513e9b4827a1a998337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int kn::window::getScale</definition>
        <argsstring>()</argsstring>
        <name>getScale</name>
        <qualifiedname>kn::window::getScale</qualifiedname>
        <briefdescription>
<para>Get the scale of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The scale of the window. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="108" column="5" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="108" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1aa36dc83cb3bbd4a898546980370824f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkn_1_1math_1_1_vec2" kindref="compound">math::Vec2</ref></type>
        <definition>math::Vec2 kn::window::getSize</definition>
        <argsstring>()</argsstring>
        <name>getSize</name>
        <qualifiedname>kn::window::getSize</qualifiedname>
        <briefdescription>
<para>Get the size of the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the screen. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="115" column="12" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="115" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1a53ecd356997f4620d560dcc3c88a9330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::setTitle</definition>
        <argsstring>(const std::string &amp;newTitle)</argsstring>
        <name>setTitle</name>
        <qualifiedname>kn::window::setTitle</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>newTitle</declname>
        </param>
        <briefdescription>
<para>Set the title of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>The new title for the window. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="122" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="122" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1af5b8f4551b8a1f1289c727aa50456e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::setFullscreen</definition>
        <argsstring>(bool fullscreen)</argsstring>
        <name>setFullscreen</name>
        <qualifiedname>kn::window::setFullscreen</qualifiedname>
        <param>
          <type>bool</type>
          <declname>fullscreen</declname>
        </param>
        <briefdescription>
<para>Set whether the window is fullscreen or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullscreen</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if setting fullscreen, <computeroutput>false</computeroutput> otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="129" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1window_1ad4ab08f768d36a6c1a93613284df7075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::window::quit</definition>
        <argsstring>()</argsstring>
        <name>quit</name>
        <qualifiedname>kn::window::quit</qualifiedname>
        <briefdescription>
<para>Quit SDL and destroy the window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="134" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Window.hpp" declline="134" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Code/c++/Kraken-Engine/include/Window.hpp" line="17" column="1"/>
  </compounddef>
</doxygen>
