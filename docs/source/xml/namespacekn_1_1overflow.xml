<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespacekn_1_1overflow" kind="namespace" language="C++">
    <compoundname>kn::overflow</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacekn_1_1overflow_1ad3ee30b8b27693bdb530d6d141419c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isSumValid</definition>
        <argsstring>(const double &amp;first, const double &amp;second)</argsstring>
        <name>isSumValid</name>
        <qualifiedname>kn::overflow::isSumValid</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Checks if an overflow would occur in summation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>first value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>second value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if sum is valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="21" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1aed83d457479296ad3a113389cf7f9777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isSumValid</definition>
        <argsstring>(const float &amp;first, const float &amp;second)</argsstring>
        <name>isSumValid</name>
        <qualifiedname>kn::overflow::isSumValid</qualifiedname>
        <param>
          <type>const float &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="23" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a4bf336d52bc2e64c29ef02b6de188019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isSumValid</definition>
        <argsstring>(const uint32_t &amp;first, const uint32_t &amp;second)</argsstring>
        <name>isSumValid</name>
        <qualifiedname>kn::overflow::isSumValid</qualifiedname>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="25" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a6be2d4d95ceafe583e17eb9f4012ffcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isSumValid</definition>
        <argsstring>(const uint64_t &amp;first, const uint64_t &amp;second)</argsstring>
        <name>isSumValid</name>
        <qualifiedname>kn::overflow::isSumValid</qualifiedname>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="27" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1ada0ca3132f003596ccef488fd069aa6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isSumValid</definition>
        <argsstring>(const int32_t &amp;first, const int32_t &amp;second)</argsstring>
        <name>isSumValid</name>
        <qualifiedname>kn::overflow::isSumValid</qualifiedname>
        <param>
          <type>const int32_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="29" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a2f8cec4c7b67aa9ed81f0bc1bfc70958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isSumValid</definition>
        <argsstring>(const int64_t &amp;first, const int64_t &amp;second)</argsstring>
        <name>isSumValid</name>
        <qualifiedname>kn::overflow::isSumValid</qualifiedname>
        <param>
          <type>const int64_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const int64_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="31" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a9137b9047939c0b5b26011096ffec3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isProductValid</definition>
        <argsstring>(const double &amp;first, const double &amp;second)</argsstring>
        <name>isProductValid</name>
        <qualifiedname>kn::overflow::isProductValid</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Checks if an overflow would occur in multiplcation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>first value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>second value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if product is valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="42" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a236c4186d0bf850dcda86d6786f37717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isProductValid</definition>
        <argsstring>(const float &amp;first, const float &amp;second)</argsstring>
        <name>isProductValid</name>
        <qualifiedname>kn::overflow::isProductValid</qualifiedname>
        <param>
          <type>const float &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="44" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1afefec0547816919c2437e88d37fd8490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isProductValid</definition>
        <argsstring>(const uint32_t &amp;first, const uint32_t &amp;second)</argsstring>
        <name>isProductValid</name>
        <qualifiedname>kn::overflow::isProductValid</qualifiedname>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="46" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a9b3581d891889d52669940436cc12c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isProductValid</definition>
        <argsstring>(const uint64_t &amp;first, const uint64_t &amp;second)</argsstring>
        <name>isProductValid</name>
        <qualifiedname>kn::overflow::isProductValid</qualifiedname>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="48" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a66e6261965e16ff6a11370fe068aba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isProductValid</definition>
        <argsstring>(const int32_t &amp;first, const int32_t &amp;second)</argsstring>
        <name>isProductValid</name>
        <qualifiedname>kn::overflow::isProductValid</qualifiedname>
        <param>
          <type>const int32_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="50" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="50" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1a24a49539a10f1d745cf7936fda3243ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::isProductValid</definition>
        <argsstring>(const int64_t &amp;first, const int64_t &amp;second)</argsstring>
        <name>isProductValid</name>
        <qualifiedname>kn::overflow::isProductValid</qualifiedname>
        <param>
          <type>const int64_t &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const int64_t &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="52" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1ae2822823016fe3378120ef5a93a26976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::closeToZero</definition>
        <argsstring>(const double &amp;value, const double tolerance=0.0001)</argsstring>
        <name>closeToZero</name>
        <qualifiedname>kn::overflow::closeToZero</qualifiedname>
        <param>
          <type>const double &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tolerance</declname>
          <defval>0.0001</defval>
        </param>
        <briefdescription>
<para>Checks if the value is close to zero. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>the accuracy to use, anything closer to 0 than this will be considered zero </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if close to zero, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="63" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacekn_1_1overflow_1aecdcfbaf631cb8f3add68c4f4fcafd42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::overflow::closeToZero</definition>
        <argsstring>(const float &amp;value, const float tolerance=0.0001f)</argsstring>
        <name>closeToZero</name>
        <qualifiedname>kn::overflow::closeToZero</qualifiedname>
        <param>
          <type>const float &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>tolerance</declname>
          <defval>0.0001f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="65" column="6" declfile="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" declline="65" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Code/c++/Kraken-Engine/include/Overflow.hpp" line="11" column="1"/>
  </compounddef>
</doxygen>
