<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classkn_1_1_texture_cache" kind="class" language="C++" prot="public" final="yes">
    <compoundname>kn::TextureCache</compoundname>
    <includes refid="_texture_cache_8hpp" local="no">TextureCache.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classkn_1_1_texture_cache_1a6434464b3dfb1b038815313ee4ef5f8f" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::shared_ptr&lt;Texture&gt; &gt; kn::TextureCache::textures</definition>
        <argsstring></argsstring>
        <name>textures</name>
        <qualifiedname>kn::TextureCache::textures</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="93" column="14" bodyfile="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classkn_1_1_texture_cache_1a30578a18426ef3626d2ebff18b775d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>kn::TextureCache::TextureCache</definition>
        <argsstring>()=default</argsstring>
        <name>TextureCache</name>
        <qualifiedname>kn::TextureCache::TextureCache</qualifiedname>
        <briefdescription>
<para>Instantiate the texture cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="23" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1adf8c16a1cde822c3598404335f41e8b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>kn::TextureCache::~TextureCache</definition>
        <argsstring>()</argsstring>
        <name>~TextureCache</name>
        <qualifiedname>kn::TextureCache::~TextureCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="24" column="5" bodyfile="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1a424624eee8b1e356b12df8f06998f35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Texture &gt; kn::TextureCache::load</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;path)</argsstring>
        <name>load</name>
        <qualifiedname>kn::TextureCache::load</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Load a texture file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the texture file.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The texture pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="34" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1a65f40584e35acce97c5919fe1e53501a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Texture &gt; kn::TextureCache::create</definition>
        <argsstring>(const std::string &amp;name, const math::Vec2 &amp;size, Color color)</argsstring>
        <name>create</name>
        <qualifiedname>kn::TextureCache::create</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="structkn_1_1math_1_1_vec2" kindref="compound">math::Vec2</ref> &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespacekn_1a91eb5db82680dedc10733f04def8dd2f" kindref="member">Color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Create a solid texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color of the texture.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The texture pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="46" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1ac2cc4f423bac33ad8c2865301be31c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Texture &gt; kn::TextureCache::move</definition>
        <argsstring>(const std::string &amp;name, std::shared_ptr&lt; Texture &gt; texture)</argsstring>
        <name>move</name>
        <qualifiedname>kn::TextureCache::move</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt;</type>
          <declname>texture</declname>
        </param>
        <briefdescription>
<para>Move an existing texture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to move.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function is recommended for loading fonts.</para>
</simplesect>
<simplesect kind="return"><para>The texture pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="59" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1ac5a50795a0cde01f052166e477d5099e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::map&lt; std::string, std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &gt; &amp;</type>
        <definition>const std::map&lt; std::string, std::shared_ptr&lt; Texture &gt; &gt; &amp; kn::TextureCache::getCache</definition>
        <argsstring>() const</argsstring>
        <name>getCache</name>
        <qualifiedname>kn::TextureCache::getCache</qualifiedname>
        <briefdescription>
<para>Get the const reference to the texture cache. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The texture cache. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="67" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1ac4c9efdc51bc5407a1422c970d5907d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::TextureCache::unload</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>unload</name>
        <qualifiedname>kn::TextureCache::unload</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Unload a texture from cache. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="74" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1a0992ea0a972b7056c57d480c594acf4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::TextureCache::unloadAll</definition>
        <argsstring>()</argsstring>
        <name>unloadAll</name>
        <qualifiedname>kn::TextureCache::unloadAll</qualifiedname>
        <briefdescription>
<para>Unload all textures from cache. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method is called in the destructor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="81" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_texture_cache_1a2603a9b25402eda33f7e0b3a30b94bfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt;</type>
        <definition>std::shared_ptr&lt; Texture &gt; kn::TextureCache::getTexture</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>getTexture</name>
        <qualifiedname>kn::TextureCache::getTexture</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a texture pointer from cache. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the texture.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The texture pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="90" column="21"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class to cache textures. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>This class is planned to become a singleton. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" line="17" column="1" bodyfile="D:/Code/c++/Kraken-Engine/include/TextureCache.hpp" bodystart="18" bodyend="94"/>
    <listofallmembers>
      <member refid="classkn_1_1_texture_cache_1a65f40584e35acce97c5919fe1e53501a" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>create</name></member>
      <member refid="classkn_1_1_texture_cache_1ac5a50795a0cde01f052166e477d5099e" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>getCache</name></member>
      <member refid="classkn_1_1_texture_cache_1a2603a9b25402eda33f7e0b3a30b94bfd" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>getTexture</name></member>
      <member refid="classkn_1_1_texture_cache_1a424624eee8b1e356b12df8f06998f35f" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>load</name></member>
      <member refid="classkn_1_1_texture_cache_1ac2cc4f423bac33ad8c2865301be31c04" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>move</name></member>
      <member refid="classkn_1_1_texture_cache_1a30578a18426ef3626d2ebff18b775d0f" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>TextureCache</name></member>
      <member refid="classkn_1_1_texture_cache_1a6434464b3dfb1b038815313ee4ef5f8f" prot="private" virt="non-virtual"><scope>kn::TextureCache</scope><name>textures</name></member>
      <member refid="classkn_1_1_texture_cache_1ac4c9efdc51bc5407a1422c970d5907d4" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>unload</name></member>
      <member refid="classkn_1_1_texture_cache_1a0992ea0a972b7056c57d480c594acf4b" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>unloadAll</name></member>
      <member refid="classkn_1_1_texture_cache_1adf8c16a1cde822c3598404335f41e8b9" prot="public" virt="non-virtual"><scope>kn::TextureCache</scope><name>~TextureCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
