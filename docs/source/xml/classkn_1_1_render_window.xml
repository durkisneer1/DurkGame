<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classkn_1_1_render_window" kind="class" language="C++" prot="public" final="yes">
    <compoundname>kn::RenderWindow</compoundname>
    <includes refid="_render_window_8hpp" local="no">RenderWindow.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classkn_1_1_render_window_1a1117133557ac0add84448fc4963ee627" prot="private" static="no" mutable="no">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* kn::RenderWindow::m_renderer</definition>
        <argsstring></argsstring>
        <name>m_renderer</name>
        <qualifiedname>kn::RenderWindow::m_renderer</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="142" column="18" bodyfile="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkn_1_1_render_window_1af174d2f6a0fef009255e7b27ad347cd5" prot="private" static="no" mutable="no">
        <type>SDL_Window *</type>
        <definition>SDL_Window* kn::RenderWindow::m_window</definition>
        <argsstring></argsstring>
        <name>m_window</name>
        <qualifiedname>kn::RenderWindow::m_window</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="143" column="16" bodyfile="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkn_1_1_render_window_1a7d4c099a91f79a02d56d8ce0c6419010" prot="private" static="no" mutable="no">
        <type>KN_Event</type>
        <definition>KN_Event kn::RenderWindow::m_event</definition>
        <argsstring></argsstring>
        <name>m_event</name>
        <qualifiedname>kn::RenderWindow::m_event</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="145" column="14" bodyfile="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classkn_1_1_render_window_1a19158c9bbfc7629788e81b9b4aa69b64" prot="private" static="no" mutable="no">
        <type>std::vector&lt; SDL_Event &gt;</type>
        <definition>std::vector&lt;SDL_Event&gt; kn::RenderWindow::m_events</definition>
        <argsstring></argsstring>
        <name>m_events</name>
        <qualifiedname>kn::RenderWindow::m_events</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="146" column="17" bodyfile="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classkn_1_1_render_window_1adcad93cc1e1c336afff133667bdbcb2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkn_1_1_render_window" kindref="compound">RenderWindow</ref> &amp;</type>
        <definition>static RenderWindow &amp; kn::RenderWindow::getInstance</definition>
        <argsstring>()</argsstring>
        <name>getInstance</name>
        <qualifiedname>kn::RenderWindow::getInstance</qualifiedname>
        <briefdescription>
<para>Get a reference to the instance of the singleton. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="31" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a04888f5d385499db342f75021fa6beb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int kn::RenderWindow::getScale</definition>
        <argsstring>()</argsstring>
        <name>getScale</name>
        <qualifiedname>kn::RenderWindow::getScale</qualifiedname>
        <briefdescription>
<para>Get the scale of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="111" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a169192f7eb40b203031c7a26a711fa26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void kn::RenderWindow::setScale</definition>
        <argsstring>(int newScale)</argsstring>
        <name>setScale</name>
        <qualifiedname>kn::RenderWindow::setScale</qualifiedname>
        <param>
          <type>int</type>
          <declname>newScale</declname>
        </param>
        <briefdescription>
<para>Set the scale of the window. </para>
        </briefdescription>
        <detaileddescription>
<para>Only valid before instantiating <ref refid="classkn_1_1_render_window" kindref="compound">RenderWindow</ref> for the first time</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newScale</parametername>
</parameternamelist>
<parameterdescription>
<para>the scale of the window </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="133" column="17"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classkn_1_1_render_window_1adbc6173c883f03ff8bb6cdc98c051dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::cls</definition>
        <argsstring>(SDL_Color color={0, 0, 0, 255})</argsstring>
        <name>cls</name>
        <qualifiedname>kn::RenderWindow::cls</qualifiedname>
        <param>
          <type>SDL_Color</type>
          <declname>color</declname>
          <defval>{0, 0, 0, 255}</defval>
        </param>
        <briefdescription>
<para>Clear the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color to clear the screen. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="38" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a7d04089325a8080a1f4b7c5cb9e4f12c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::flip</definition>
        <argsstring>()</argsstring>
        <name>flip</name>
        <qualifiedname>kn::RenderWindow::flip</qualifiedname>
        <briefdescription>
<para>Flip the render frame buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="43" column="10" bodyfile="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a42bc368f61f894d86f3061a7b69960db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::blit</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, Rect crop, Rect rect)</argsstring>
        <name>blit</name>
        <qualifiedname>kn::RenderWindow::blit</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>crop</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>rect</declname>
        </param>
        <briefdescription>
<para>Draw a texture using rects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crop</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="52" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1af9cca175a5bb42c51d379d44d9a9bf1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::blit</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, const math::Vec2 &amp;position)</argsstring>
        <name>blit</name>
        <qualifiedname>kn::RenderWindow::blit</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="structkn_1_1math_1_1_vec2" kindref="compound">math::Vec2</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Draw a texture to a position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to draw at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="60" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1aa41e48a864ad17ead2c071963ca584fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::blitEx</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, Rect crop, Rect rect, double angle=0.0, bool flipX=false, bool flipY=false)</argsstring>
        <name>blitEx</name>
        <qualifiedname>kn::RenderWindow::blitEx</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>crop</declname>
        </param>
        <param>
          <type><ref refid="structkn_1_1_rect" kindref="compound">Rect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipX</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipY</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Draw a texture using rects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crop</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rect</parametername>
</parameternamelist>
<parameterdescription>
<para>The rectangle to draw to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to draw the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipX</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the x-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipY</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the y-axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="72" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a748a1d4865fb6042eeb71ce35213fca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::blitEx</definition>
        <argsstring>(const std::shared_ptr&lt; Texture &gt; &amp;texture, const math::Vec2 &amp;position, double angle=0.0, bool flipX=false, bool flipY=false)</argsstring>
        <name>blitEx</name>
        <qualifiedname>kn::RenderWindow::blitEx</qualifiedname>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classkn_1_1_texture" kindref="compound">Texture</ref> &gt; &amp;</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>const <ref refid="structkn_1_1math_1_1_vec2" kindref="compound">math::Vec2</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipX</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>flipY</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Draw a texture to a position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture to draw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position to draw at. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The angle to draw the texture. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipX</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the x-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flipY</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to flip the texture on the y-axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="83" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a8fade150c1e4b23c46a44e8df4367969" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer * kn::RenderWindow::getRenderer</definition>
        <argsstring>()</argsstring>
        <name>getRenderer</name>
        <qualifiedname>kn::RenderWindow::getRenderer</qualifiedname>
        <briefdescription>
<para>Get the window renderer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The window renderer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="90" column="18" bodyfile="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1ab6fe3057df99ba603aa118958a69918c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; KN_Event &gt; &amp;</type>
        <definition>const std::vector&lt; KN_Event &gt; &amp; kn::RenderWindow::getEvents</definition>
        <argsstring>()</argsstring>
        <name>getEvents</name>
        <qualifiedname>kn::RenderWindow::getEvents</qualifiedname>
        <briefdescription>
<para>Get user events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The user events. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="97" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a08e59168fc273ef5c55e74c21c7b93b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool kn::RenderWindow::getFullscreen</definition>
        <argsstring>() const</argsstring>
        <name>getFullscreen</name>
        <qualifiedname>kn::RenderWindow::getFullscreen</qualifiedname>
        <briefdescription>
<para>Get whether the window is fullscreen or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the window is fullscreen or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1afe261879b8ff7554723757fc320c99a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::setTitle</definition>
        <argsstring>(const std::string &amp;newTitle)</argsstring>
        <name>setTitle</name>
        <qualifiedname>kn::RenderWindow::setTitle</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>newTitle</declname>
        </param>
        <briefdescription>
<para>Set the title of the window. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newTitle</parametername>
</parameternamelist>
<parameterdescription>
<para>the new title </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="118" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a64f5d5c9dba806a63815b2521b396adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kn::RenderWindow::setFullscreen</definition>
        <argsstring>(bool fullscreen)</argsstring>
        <name>setFullscreen</name>
        <qualifiedname>kn::RenderWindow::setFullscreen</qualifiedname>
        <param>
          <type>bool</type>
          <declname>fullscreen</declname>
        </param>
        <briefdescription>
<para>Set whether the window is fullscreen or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fullscreen</parametername>
</parameternamelist>
<parameterdescription>
<para>true if setting fullscreen, false otherwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="125" column="10"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classkn_1_1_render_window_1a120f2cd929f30fea7a367025658395dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>kn::RenderWindow::RenderWindow</definition>
        <argsstring>()</argsstring>
        <name>RenderWindow</name>
        <qualifiedname>kn::RenderWindow::RenderWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="136" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a5ed9d63ab84ffa51793e1e788c867233" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>kn::RenderWindow::RenderWindow</definition>
        <argsstring>(const RenderWindow &amp;other)=delete</argsstring>
        <name>RenderWindow</name>
        <qualifiedname>kn::RenderWindow::RenderWindow</qualifiedname>
        <param>
          <type>const <ref refid="classkn_1_1_render_window" kindref="compound">RenderWindow</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="137" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a0e5af334903645c870c713f53b754823" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>kn::RenderWindow::~RenderWindow</definition>
        <argsstring>()</argsstring>
        <name>~RenderWindow</name>
        <qualifiedname>kn::RenderWindow::~RenderWindow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="138" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classkn_1_1_render_window_1a6438f39a2be6013f5c22eaf8df5dda48" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classkn_1_1_render_window" kindref="compound">RenderWindow</ref> &amp;</type>
        <definition>RenderWindow &amp; kn::RenderWindow::operator=</definition>
        <argsstring>(const RenderWindow &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>kn::RenderWindow::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classkn_1_1_render_window" kindref="compound">RenderWindow</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="140" column="18"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The renderer context. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" line="23" column="1" bodyfile="D:/Code/c++/Kraken-Engine/include/RenderWindow.hpp" bodystart="24" bodyend="147"/>
    <listofallmembers>
      <member refid="classkn_1_1_render_window_1a42bc368f61f894d86f3061a7b69960db" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>blit</name></member>
      <member refid="classkn_1_1_render_window_1af9cca175a5bb42c51d379d44d9a9bf1b" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>blit</name></member>
      <member refid="classkn_1_1_render_window_1aa41e48a864ad17ead2c071963ca584fa" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>blitEx</name></member>
      <member refid="classkn_1_1_render_window_1a748a1d4865fb6042eeb71ce35213fca5" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>blitEx</name></member>
      <member refid="classkn_1_1_render_window_1adbc6173c883f03ff8bb6cdc98c051dcb" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>cls</name></member>
      <member refid="classkn_1_1_render_window_1a7d04089325a8080a1f4b7c5cb9e4f12c" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>flip</name></member>
      <member refid="classkn_1_1_render_window_1ab6fe3057df99ba603aa118958a69918c" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>getEvents</name></member>
      <member refid="classkn_1_1_render_window_1a08e59168fc273ef5c55e74c21c7b93b7" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>getFullscreen</name></member>
      <member refid="classkn_1_1_render_window_1adcad93cc1e1c336afff133667bdbcb2c" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>getInstance</name></member>
      <member refid="classkn_1_1_render_window_1a8fade150c1e4b23c46a44e8df4367969" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>getRenderer</name></member>
      <member refid="classkn_1_1_render_window_1a04888f5d385499db342f75021fa6beb0" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>getScale</name></member>
      <member refid="classkn_1_1_render_window_1a7d4c099a91f79a02d56d8ce0c6419010" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>m_event</name></member>
      <member refid="classkn_1_1_render_window_1a19158c9bbfc7629788e81b9b4aa69b64" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>m_events</name></member>
      <member refid="classkn_1_1_render_window_1a1117133557ac0add84448fc4963ee627" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>m_renderer</name></member>
      <member refid="classkn_1_1_render_window_1af174d2f6a0fef009255e7b27ad347cd5" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>m_window</name></member>
      <member refid="classkn_1_1_render_window_1a6438f39a2be6013f5c22eaf8df5dda48" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>operator=</name></member>
      <member refid="classkn_1_1_render_window_1a120f2cd929f30fea7a367025658395dc" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>RenderWindow</name></member>
      <member refid="classkn_1_1_render_window_1a5ed9d63ab84ffa51793e1e788c867233" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>RenderWindow</name></member>
      <member refid="classkn_1_1_render_window_1a64f5d5c9dba806a63815b2521b396adb" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>setFullscreen</name></member>
      <member refid="classkn_1_1_render_window_1a169192f7eb40b203031c7a26a711fa26" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>setScale</name></member>
      <member refid="classkn_1_1_render_window_1afe261879b8ff7554723757fc320c99a2" prot="public" virt="non-virtual"><scope>kn::RenderWindow</scope><name>setTitle</name></member>
      <member refid="classkn_1_1_render_window_1a0e5af334903645c870c713f53b754823" prot="private" virt="non-virtual"><scope>kn::RenderWindow</scope><name>~RenderWindow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
